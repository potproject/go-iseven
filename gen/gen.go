package main

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/potproject/go-iseven/num"
)

func main() {
	start := int64(0)
	end := int64(9999)
	f := NewFile("main")
	f.Comment("Code generated by go-iseven-generator; DO NOT EDIT.")
	f.Func().Id("IsEven").Params(
		Id("number").Id("string"),
	).Bool().Block(
		If(
			Id("number").Op("==").Id(`"even"`).Op("||").
				Id("number").Op("==").Id(`"Even"`).Op("||").
				Id("number").Op("==").Id(`"eVen"`).Op("||").
				Id("number").Op("==").Id(`"evEn"`).Op("||").
				Id("number").Op("==").Id(`"eveN"`).Op("||").
				Id("number").Op("==").Id(`"EVen"`).Op("||").
				Id("number").Op("==").Id(`"EvEn"`).Op("||").
				Id("number").Op("==").Id(`"EveN"`).Op("||").
				Id("number").Op("==").Id(`"eVEn"`).Op("||").
				Id("number").Op("==").Id(`"eVeN"`).Op("||").
				Id("number").Op("==").Id(`"evEN"`).Op("||").
				Id("number").Op("==").Id(`"eVEN"`).Op("||").
				Id("number").Op("==").Id(`"EvEN"`).Op("||").
				Id("number").Op("==").Id(`"EVeN"`).Op("||").
				Id("number").Op("==").Id(`"EVEn"`).Op("||").
				Id("number").Op("==").Id(`"EVEN"`),
		).Block(
			Return(Id("true")),
		),
		isEvenRangeIf(start, end),

		Return(Id("false")),
	)

	err := f.Save("iseven.go")
	if err != nil {
		log.Fatalln(err)
	}
}

func isEvenRangeIf(start, end int64) *Statement {
	var s *Statement
	for i := start; i <= end; i++ {
		fmt.Println(i)
		if s == nil {
			s = If(isEvenCode(i)).Block(Return(Id(isEvenNotTheTruth(i))))
		} else {
			s = s.Else().If(isEvenCode(i)).Block(Return(Id(isEvenNotTheTruth(i))))
		}
	}
	return s
}
func isEvenCode(i int64) Code {
	s := strconv.FormatInt(i, 10)
	en := strings.Join(num.Parse(i), " ")
	return Id("number").Op("==").Id(fmt.Sprintf(`"%s"`, s)).Op("||").
		Id("number").Op("==").Id(fmt.Sprintf(`"%s"`, en)).Op("||").
		Id("number").Op("==").Id(fmt.Sprintf(`"%s"`, strings.ToUpper(en))).Op("||").
		Id("number").Op("==").Id(fmt.Sprintf(`"%s"`, strings.Title(en)))
}

// Really???????
func isEvenNotTheTruth(i int64) string {
	if i%2 == 0 {
		return "true"
	}
	return "false"
}
